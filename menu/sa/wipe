#!/bin/bash
#
#	Wipe data of selected device
#	If only 1 hdd is available, THIS is automaticly selected!
#
	script_version=0.4
#	License:	GPL v3
#	Created:	2013.02.21
#	Changed:	2013.07.20
#	Author: 	sea ; < erat DOT simon Ã¦ gmail D0T com >
#	Resource:	
# 
#	Title
#
	sT "sea's Device Wiper ($script_version)"
#
#	Vars
#
	hadargs=false
	[ ! -z $3 ] && devices="$3" && hadargs=true || devices="$( ls /dev/[sh]d[a-z] )"
	[ "-h" = "$devices" ] && \
		echo -e "wipe ($script_version)
			\rUsage:    \tst sa wipe [[/dev/[sh]d[a-z]]
			\rAttention:\tThe only existing harddisk is 'selected' by default!" && \
		return 99
	counts=$( echo "$devices"|wc -l )
	indi=( "/" "-" "\\" "|" )
	C=0
#
#	Display
#
	if [ $counts -eq 1 ]
	then	device=$devices
	else	sE "Please select which device you want to wipe:"
		select device in $devices;do break;done
	fi
	device=$(basename $device)
	label=$(ls /dev/disk/by-id/ -l|grep $device|awk '{print $9}')
	
	[ "$(cat /etc/system-release|awk '{print $3}')" -ge 19 ] && \
		dd_status=none || \
		dd_status=noxfer
	
	
	sE "Selected device:" "$device ($label)"
	if [ ! $hadargs = true ]
	then	sT "Erease all data on $device ($label)?"
		ask "Are you sure?" || return 6
		sT "How many times to overwrite data on $device?"
		select mnuTimes in Once Multiple; do 
			case $mnuTimes in
			Once)		often=1 	;;
			Multiple)	sE "How many times?"
					select often in 2 4 8 16 ; do break;done
					;;
			esac
			break
		done
	else	often=1
	fi
	
	sT "Overwrite MBR"
	for bs in 64 128 256 512
	do	for num in 1 8 4
		do	sP "Reseting MBR ($bs blocks * $num times)... " "[ ${indi[$C]} ] $WORK"
			dd status=$dd_status if=/dev/zero of=/dev/$device bs=$bs count=$num
			let C++
			[ $C -eq 4 ] && C=0
		done
	done
	ReportStatus $? "Reset MBR"
	
	sT "Erease Data $often time/s"
	ByteSizes=( 2003 2011 2017 2027 2029 2039 2053 2063 2069 \
	2081 2083 2087 2089 2099 2111 2113 2129 2131 2137 2141 2143 2153 \
	2161 2179 2203 2207 2213 2221 2237 2239 2243 2251 2267 2269 2273 \
	2281 2287 2293 2297 2309 2311 2333 2339 2341 2347 2351 2357 2371 \
	2377 2381 2383 2389 2393 2399 2411 2417 2423 2437 2441 2447 2459 \
	2467 2473 2477 2503 2521 2531 2539 2543 2549 2551 2557 2579 2591 \
	2593 2609 2617 2621 2633 2647 2657 2659 2663 2671 2677 2683 2687 \
	2689 2693 2699 2707 2711 2713 2719 2729 2731 2741 2749 2753 2767 \
	2777 2789 2791 2797 2801 2803 2819 2833 2837 2843 2851 2857 2861 \
	2879 2887 2897 2903 2909 2917 2927 2939 2953 2957 2963 2969 2971 \
	2999 3001 3011 3019 3023 3037 3041 3049 3061 3067 3079 3083 3089 \
	3109 3119 3121 3137 3163 3167 3169 3181 3187 3191 3203 3209 3217 \
	3221 3229 3251 3253 3257 3259 3271 3299 3301 3307 3313 3319 3323 \
	3329 3331 3343 3347 3359 3361 3371 3373 3389 3391 3407 3413 3433 \
	3449 3457 3461 3463 3467 3469 3491 3499 3511 3517 3527 3529 3533 \
	3539 3541 3547 3557 3559 3571 3581 3583 3593 3607 3613 3617 3623 \
	3631 3637 3643 3659 3671 3673 3677 3691 3697 3701 3709 3719 3727 \
	3733 3739 3761 3767 3769 3779 3793 3797 3803 3821 3823 3833 3847 \
	3851 3853 3863 3877 3881 3889 3907 3911 3917 3919 3923 3929 3931 \
	3943 3947 3967 3989 4001 4003 4007 4013 4019 4021 4027 4049 4051 \
	4057 4073 4079 4091 4093 4099 4111 4127 4129 4133 4139 4153 4157 \
	4159 4177 4201 4211 4217 4219 4229 4231 4241 4243 4253 4259 4261 \
	4271 4273 4283 4289 4297 4327 4337 4339 4349 4357 4363 4373 4391 \
	4397 4409 4421 4423 4441 4447 4451 4457 4463 4481 4483 4493 4507 \
	4513 4517 4519 4523 4547 4549 4561 4567 4583 4591 4597 4603 4621 \
	4637 4639 4643 4649 4651 4657 4663 4673 4679 4691 4703 4721 4723 \
	4729 4733 4751 4759 4783 4787 4789 4793 4799 4801 4813 4817 4831 \
	4861 4871 4877 4889 4903 4909 4919 4931 4933 4937 4943 4951 4957 \
	4967 4969 4973 4987 4993 4999 5003 5009 5011 5021 5023 5039 5051 \
	5059 5077 5081 5087 5099 5101 5107 5113 5119 5147 5153 5167 5171 \
	5179 5189 5197 5209 5227 5231 5233 5237 5261 5273 5279 5281 5297 \
	5303 5309 5323 5333 5347 5351 5381 5387 5393 5399 5407 5413 5417 \
	5419 5431 5437 5441 5443 5449 5471 5477 5479 5483 5501 5503 5507 \
	5519 5521 5527 5531 5557 5563 5569 5573 5581 5591 5623 5639 5641 \
	5647 5651 5653 5657 5659 5669 5683 5689 5693 5701 5711 5717 5737 \
	5741 5743 5749 5779 5783 5791 5801 5807 5813 5821 5827 5839 5843 \
	5849 5851 5857 5861 5867 5869 5879 5881 5897 5903 5923 5927 5939 \
	5953 5981 5987 )
	C=1 ; I=0
	result=0
	for throw in ${ByteSizes[@]}
	do	sP "Rolling dices ($C/${#ByteSizes[@]})" "[ ${indi[$I]} ] $WORK"
		thisrnd=$[ $RANDOM % 2 ]
		let C++ I++
		result=$[ $result + $thisrnd ]
		[ 4 -eq $I ] && I=0
	done
	BS=${ByteSizes[$result]}
	sE "Randomly selected ${BS}K as bytesize used" "$INFO"
	sE "This may take a while, depending on devicesize, r/w-speed" "$INFO"
	
	for num in $(seq 1 $often)
	do	sP "Overwriting $device, Stage: $num/$often..." "$WORK"
		dd status=$dd_status if=/dev/urandom of=/dev/$device bs=${BS}K 
	done
	ReportStatus $? "Wiped device /dev/$device ($label)"
	sE "If it failed because of disk-full-error, it succeeded." "$INFO"
